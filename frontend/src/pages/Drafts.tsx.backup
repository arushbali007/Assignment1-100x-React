import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Card } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import {
  Mail as MailIcon,
  Settings,
  Send,
  Plus,
  Loader2,
  FileText,
  Sparkles,
  RefreshCw,
  Trash2,
  Edit as EditIcon,
  Copy,
  Clock,
  Eye,
  CheckCircle2,
  Calendar,
  Zap,
} from "lucide-react";
import { Link } from "react-router-dom";
import { useAuth } from "@/contexts/AuthContext";
import { draftsApi, trendsApi, sourcesApi } from "@/lib/api";
import { toast } from "sonner";

export default function Drafts() {
  const { user, logout } = useAuth();
  const [isLoading, setIsLoading] = useState(true);
  const [drafts, setDrafts] = useState<any[]>([]);
  const [selectedDraft, setSelectedDraft] = useState<any>(null);
  const [trends, setTrends] = useState<any[]>([]);
  const [isGenerating, setIsGenerating] = useState(false);
  const [sourceCount, setSourceCount] = useState(0);
  const [isSending, setIsSending] = useState(false);

  useEffect(() => {
    loadData();
  }, []);

  const loadData = async () => {
    try {
      setIsLoading(true);
      const [draftsResponse, trendsResponse, sourcesStats] = await Promise.all([
        draftsApi.getAll(1, 10),
        trendsApi.getTop(5),
        sourcesApi.getStats(),
      ]);

      const draftsList = draftsResponse.drafts || [];
      setDrafts(draftsList);
      setTrends(trendsResponse.trends || []);
      setSourceCount(sourcesStats.total || 0);

      if (draftsList.length > 0) {
        setSelectedDraft(draftsList[0]);
      }
    } catch (error: any) {
      console.error("Failed to load drafts:", error);
      toast.error("Failed to load drafts");
    } finally {
      setIsLoading(false);
    }
  };

  const handleGenerateDraft = async () => {
    if (sourceCount === 0) {
      toast.error("Please add sources first before generating a draft");
      return;
    }

    setIsGenerating(true);
    try {
      const newDraft = await draftsApi.generate(false, true, 3);
      toast.success("Draft generated successfully!");
      await loadData();
      setSelectedDraft(newDraft);
    } catch (error: any) {
      console.error("Generate draft error:", error);
      toast.error(error?.message || "Failed to generate draft. Make sure you have sources and content.");
    } finally {
      setIsGenerating(false);
    }
  };

  const handleEditDraft = () => {
    if (!selectedDraft) return;
    toast.info("Edit functionality coming soon! For now, you can regenerate or copy the content.");
  };

  const handleSendDraft = async () => {
    if (!selectedDraft) return;

    const confirmed = confirm(`Send "${selectedDraft.subject}" to your subscribers?`);
    if (!confirmed) return;

    setIsSending(true);
    try {
      toast.info("Send functionality coming soon! Backend endpoint needs to be implemented.");
    } catch (error: any) {
      console.error("Send draft error:", error);
      toast.error(error?.message || "Failed to send draft");
    } finally {
      setIsSending(false);
    }
  };

  const handleDeleteDraft = async (draftId: string) => {
    const confirmed = confirm("Are you sure you want to delete this draft?");
    if (!confirmed) return;

    try {
      await draftsApi.delete(draftId);
      toast.success("Draft deleted successfully!");
      await loadData();
      if (selectedDraft?.id === draftId) {
        setSelectedDraft(null);
      }
    } catch (error: any) {
      console.error("Delete draft error:", error);
      toast.error(error?.message || "Failed to delete draft");
    }
  };

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gradient-subtle flex items-center justify-center">
        <div className="text-center">
          <Loader2 className="w-8 h-8 animate-spin mx-auto text-primary" />
          <p className="mt-4 text-muted-foreground">Loading drafts...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 via-blue-50/30 to-indigo-50/20 dark:from-slate-950 dark:via-slate-900 dark:to-slate-800">
      {/* Modern Header */}
      <header className="border-b border-slate-200/50 dark:border-slate-700/50 bg-white/80 dark:bg-slate-900/80 backdrop-blur-sm">
        <div className="px-12">
          <div className="flex items-center justify-between h-16">
            <Link to="/" className="flex items-center gap-3 group">
              <div className="w-9 h-9 rounded-lg bg-gradient-to-br from-blue-600 to-indigo-600 flex items-center justify-center shadow-md group-hover:scale-105 transition-transform">
                <MailIcon className="w-5 h-5 text-white" />
              </div>
              <span className="text-xl font-bold text-slate-900 dark:text-white">
                CreatorPulse
              </span>
            </Link>

            <nav className="hidden md:flex items-center gap-6">
              <Link
                to="/dashboard"
                className="text-sm font-medium text-slate-600 dark:text-slate-300 hover:text-slate-900 dark:hover:text-white transition-colors"
              >
                Dashboard
              </Link>
              <Link
                to="/sources"
                className="text-sm font-medium text-slate-600 dark:text-slate-300 hover:text-slate-900 dark:hover:text-white transition-colors"
              >
                Sources
              </Link>
              <Link
                to="/drafts"
                className="text-sm font-medium text-blue-600 dark:text-blue-400 border-b-2 border-blue-600 dark:border-blue-400 pb-1"
              >
                Drafts
              </Link>
              <Link
                to="/settings"
                className="text-sm font-medium text-slate-600 dark:text-slate-300 hover:text-slate-900 dark:hover:text-white transition-colors"
              >
                Settings
              </Link>
            </nav>

            <div className="flex items-center gap-4">
              <span className="hidden lg:block text-sm text-slate-600 dark:text-slate-400">
                {user?.email}
              </span>
              <Button
                variant="ghost"
                size="icon"
                className="hover:bg-slate-100 dark:hover:bg-slate-800"
              >
                <Settings className="w-5 h-5" />
              </Button>
              <Button
                variant="outline"
                size="sm"
                onClick={logout}
                className="border-slate-300 dark:border-slate-600"
              >
                Logout
              </Button>
            </div>
          </div>
        </div>
      </header>

      {/* Main Content - Full Width */}
      <main className="h-[calc(100vh-64px)] flex flex-col">
        {/* Page Header with Stats - Fixed */}
        <div className="bg-white/50 dark:bg-slate-900/50 border-b border-slate-200/50 dark:border-slate-700/50">
          <div className="px-12 py-6">
            <div className="flex items-center justify-between mb-6">
              <div>
                <h1 className="text-3xl font-bold text-slate-900 dark:text-white mb-1">
                  Newsletter Drafts
                </h1>
                <p className="text-slate-600 dark:text-slate-400">
                  AI-powered newsletters from your curated sources
                </p>
              </div>

              <div className="flex gap-3">
                <Button
                  variant="outline"
                  onClick={loadData}
                  disabled={isLoading}
                  className="border-slate-300 dark:border-slate-600"
                >
                  <RefreshCw className={`w-4 h-4 mr-2 ${isLoading ? 'animate-spin' : ''}`} />
                  Refresh
                </Button>
                <Button
                  onClick={handleGenerateDraft}
                  disabled={isGenerating || sourceCount === 0}
                  className="bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 text-white"
                >
                  {isGenerating ? (
                    <>
                      <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                      Generating...
                    </>
                  ) : (
                    <>
                      <Sparkles className="w-4 h-4 mr-2" />
                      Generate New Draft
                    </>
                  )}
                </Button>
              </div>
            </div>

            {/* Stats Bar */}
            {drafts.length > 0 && (
              <div className="flex gap-6">
                <div className="flex items-center gap-3 px-4 py-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg border border-blue-200 dark:border-blue-800">
                  <div className="w-10 h-10 rounded-lg bg-blue-100 dark:bg-blue-900/30 flex items-center justify-center">
                    <FileText className="w-5 h-5 text-blue-600 dark:text-blue-400" />
                  </div>
                  <div>
                    <p className="text-xs text-slate-600 dark:text-slate-400">Total Drafts</p>
                    <p className="text-xl font-bold text-slate-900 dark:text-white">{drafts.length}</p>
                  </div>
                </div>
                <div className="flex items-center gap-3 px-4 py-3 bg-green-50 dark:bg-green-900/20 rounded-lg border border-green-200 dark:border-green-800">
                  <div className="w-10 h-10 rounded-lg bg-green-100 dark:bg-green-900/30 flex items-center justify-center">
                    <CheckCircle2 className="w-5 h-5 text-green-600 dark:text-green-400" />
                  </div>
                  <div>
                    <p className="text-xs text-slate-600 dark:text-slate-400">Ready to Send</p>
                    <p className="text-xl font-bold text-slate-900 dark:text-white">
                      {drafts.filter(d => d.status === "pending").length}
                    </p>
                  </div>
                </div>
                <div className="flex items-center gap-3 px-4 py-3 bg-purple-50 dark:bg-purple-900/20 rounded-lg border border-purple-200 dark:border-purple-800">
                  <div className="w-10 h-10 rounded-lg bg-purple-100 dark:bg-purple-900/30 flex items-center justify-center">
                    <Zap className="w-5 h-5 text-purple-600 dark:text-purple-400" />
                  </div>
                  <div>
                    <p className="text-xs text-slate-600 dark:text-slate-400">Active Sources</p>
                    <p className="text-xl font-bold text-slate-900 dark:text-white">{sourceCount}</p>
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>

        {/* Content Area */}
        {drafts.length === 0 ? (
          <div className="flex-1 flex items-center justify-center p-12">
            <div className="text-center">
              <div className="w-20 h-20 mx-auto mb-6 rounded-xl bg-blue-100 dark:bg-blue-900/30 flex items-center justify-center">
                <FileText className="w-10 h-10 text-blue-600 dark:text-blue-400" />
              </div>
              <h2 className="text-2xl font-bold mb-3 text-slate-900 dark:text-white">
                No Drafts Yet
              </h2>
              <p className="text-slate-600 dark:text-slate-400 mb-6">
                {sourceCount === 0
                  ? "Add sources first, then generate your first AI-powered newsletter draft."
                  : "Click 'Generate New Draft' to create your first newsletter from your sources."}
              </p>
              {sourceCount === 0 && (
                <Link to="/sources">
                  <Button className="bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 text-white">
                    <Plus className="w-4 h-4 mr-2" />
                    Add Sources First
                  </Button>
                </Link>
              )}
            </div>
          </div>
        ) : (
          <div className="flex-1 grid grid-cols-12 overflow-hidden">
            {/* Drafts List */}
            <div className="col-span-3 bg-slate-50/50 dark:bg-slate-900/30 border-r border-slate-200 dark:border-slate-700 overflow-hidden flex flex-col">
              <div className="px-6 py-4 border-b border-slate-200 dark:border-slate-700">
                <h2 className="text-sm font-semibold text-slate-700 dark:text-slate-300 uppercase tracking-wide">
                  Your Drafts ({drafts.length})
                </h2>
              </div>

              <div className="flex-1 overflow-y-auto p-4 space-y-2">
                {drafts.map((draft) => (
                  <div
                    key={draft.id}
                    className={`p-3 rounded-lg cursor-pointer transition-all ${
                      selectedDraft?.id === draft.id
                        ? "bg-blue-100 dark:bg-blue-900/30 border-l-4 border-blue-600"
                        : "bg-white dark:bg-slate-800 hover:bg-slate-100 dark:hover:bg-slate-700"
                    }`}
                    onClick={() => setSelectedDraft(draft)}
                  >
                    <div className="flex items-start justify-between gap-2 mb-2">
                      <h3 className="font-semibold text-sm text-slate-900 dark:text-white line-clamp-2 flex-1">
                        {draft.subject || "Untitled Draft"}
                      </h3>
                      <Badge
                        variant={draft.status === "pending" ? "default" : "secondary"}
                        className="text-xs shrink-0"
                      >
                        {draft.status}
                      </Badge>
                    </div>

                    <div className="flex items-center gap-3 text-xs text-slate-600 dark:text-slate-400">
                      <div className="flex items-center gap-1">
                        <Calendar className="w-3 h-3" />
                        <span>{new Date(draft.created_at).toLocaleDateString()}</span>
                      </div>
                      {draft.generation_time && (
                        <div className="flex items-center gap-1">
                          <Clock className="w-3 h-3" />
                          <span>{Math.round(draft.generation_time)}s</span>
                        </div>
                      )}
                    </div>
                  </div>
                ))}
              </div>
            </div>

            {/* Draft Preview */}
            <div className="col-span-9 bg-white dark:bg-slate-900 overflow-hidden flex flex-col">
              {selectedDraft ? (
                <>
                  {/* Preview Header */}
                  <div className="border-b border-slate-200 dark:border-slate-700 bg-slate-50/50 dark:bg-slate-800/50 px-8 py-6">
                    <div className="flex items-center justify-between mb-4">
                      <div className="flex items-center gap-2">
                        <Badge variant="secondary" className="gap-1">
                          <Eye className="w-3 h-3" />
                          Preview
                        </Badge>
                        <Badge variant={selectedDraft.status === "pending" ? "default" : "secondary"}>
                          {selectedDraft.status}
                        </Badge>
                        <span className="text-xs text-slate-600 dark:text-slate-400">
                          {new Date(selectedDraft.created_at).toLocaleString()}
                        </span>
                      </div>
                      <Button
                        variant="ghost"
                        size="sm"
                        className="text-red-600 hover:text-red-700 hover:bg-red-50 dark:hover:bg-red-900/20"
                        onClick={() => handleDeleteDraft(selectedDraft.id)}
                      >
                        <Trash2 className="w-4 h-4 mr-2" />
                        Delete
                      </Button>
                    </div>

                    <h2 className="text-2xl font-bold text-slate-900 dark:text-white mb-4">
                      {selectedDraft.subject || "Untitled Draft"}
                    </h2>

                    {/* Action Buttons */}
                    <div className="flex gap-2">
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => {
                          navigator.clipboard.writeText(selectedDraft.html_content || selectedDraft.plain_text_content || "");
                          toast.success("Content copied to clipboard!");
                        }}
                        className="border-slate-300 dark:border-slate-600"
                      >
                        <Copy className="w-4 h-4 mr-2" />
                        Copy
                      </Button>
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={handleEditDraft}
                        className="border-slate-300 dark:border-slate-600"
                      >
                        <EditIcon className="w-4 h-4 mr-2" />
                        Edit
                      </Button>
                      <Button
                        size="sm"
                        onClick={handleSendDraft}
                        disabled={isSending}
                        className="bg-gradient-to-r from-green-600 to-emerald-600 hover:from-green-700 hover:to-emerald-700 text-white"
                      >
                        {isSending ? (
                          <>
                            <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                            Sending...
                          </>
                        ) : (
                          <>
                            <Send className="w-4 h-4 mr-2" />
                            Send Newsletter
                          </>
                        )}
                      </Button>
                    </div>
                  </div>

                  {/* Content Preview */}
                  <div className="flex-1 overflow-y-auto px-12 py-8">
                    <div className="max-w-4xl">
                      <div className="prose prose-slate dark:prose-invert max-w-none">
                        {selectedDraft.html_content ? (
                          <div
                            dangerouslySetInnerHTML={{ __html: selectedDraft.html_content }}
                            className="text-slate-700 dark:text-slate-300"
                          />
                        ) : selectedDraft.plain_text_content ? (
                          <pre className="whitespace-pre-wrap font-sans text-slate-700 dark:text-slate-300">
                            {selectedDraft.plain_text_content}
                          </pre>
                        ) : (
                          <div className="text-center py-16">
                            <FileText className="w-12 h-12 mx-auto text-slate-400 mb-4" />
                            <p className="text-slate-600 dark:text-slate-400">No content available</p>
                          </div>
                        )}
                      </div>
                    </div>
                  </div>
                </>
              ) : (
                <div className="flex-1 flex items-center justify-center">
                  <div className="text-center">
                    <div className="w-16 h-16 mx-auto mb-4 rounded-xl bg-slate-100 dark:bg-slate-700 flex items-center justify-center">
                      <FileText className="w-8 h-8 text-slate-400 dark:text-slate-500" />
                    </div>
                    <p className="text-slate-600 dark:text-slate-400">
                      Select a draft to preview
                    </p>
                  </div>
                </div>
              )}
            </div>
          </div>
        )}
      </main>
    </div>
  );
}
